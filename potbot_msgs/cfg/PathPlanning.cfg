#!/usr/bin/env python
PACKAGE = "potbot_msgs"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("potential_field_rows",                 int_t, 0, "A int parameter", 120, 1, 500)
gen.add("potential_field_cols",                 int_t, 0, "A int parameter", 120, 1, 500)
gen.add("potential_field_resolution",           double_t, 0, "A double parameter", 0.05, 0.01, 1)
gen.add("weight_attraction_field",              double_t, 0, "A double parameter", 0.1, 0, 10)
gen.add("weight_repulsion_field",               double_t, 0, "A double parameter", 0.1, 0, 10)
gen.add("distance_threshold_repulsion_field",   double_t, 0, "A double parameter", 0.5, 0, 2)
gen.add("max_path_length",                      double_t, 0, "A double parameter", 6.0, 0.1, 10)
gen.add("path_search_range",                    int_t, 0,   "A int parameter", 1, 1, 10)

gen.add("weight_potential_field",               double_t, 0, "A double parameter", 1.0, 0, 10)
gen.add("weight_angle",                         double_t, 0, "A double parameter", 0.2, 0, 10)

gen.add("sync_createpath_and_controlcycle",     bool_t, 1, "A Boolean parameter", False)

gen.add("collision_count_to_replanning",        int_t, 0, "A Boolean parameter", 10, 1, 50)
gen.add("hit_distance_to_replanning",           double_t, 0, "A double parameter", 0.1, 0, 2)

gen.add("test_vx", double_t, 0, "A double parameter", 0.01, -1, 1)
gen.add("test_vy", double_t, 0, "A double parameter", 0.01, -1, 1)
gen.add("test_theta", double_t, 0, "A double parameter", 1, -180, 180)
gen.add("a", double_t, 0, "A double parameter", 0.1, 0, 100)
gen.add("b", double_t, 0, "A double parameter", 0.01, 0, 2)
gen.add("c", double_t, 0, "A double parameter", 0.01, 0, 2)

# sample
# gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
# gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)
# size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                   gen.const("Medium", int_t, 1, "A medium constant"),
#                   gen.const("Large", int_t, 2, "A large constant"),
#                   gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                   "An enum to set size")
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "PathPlanning", "PathPlanning"))